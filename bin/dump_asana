#!/usr/bin/env node
/*jslint evil: true */
require('source-map-support').install();

var nopt = require('nopt');

var knownOpts = {
  'output'  : String,
  'projects': String,
  'help'    : Boolean,
  'silent'  : Boolean
};

var shortHands = {
  'o': ['--output'],
  'p': ['--projects'],
  '?': ['--help'],
  'h': ['--help'],
  's': ['--silent']
};

// everything is optional.
// knownOpts and shorthands default to {}
// arg list defaults to process.argv
// slice defaults to 2
var parsed = nopt(knownOpts, shortHands, process.argv, 2);

if (parsed.help) {
  var usage_message = ['',
    ' Usage:',
    '',
    '   $ migrate [options] [output] [projects]',
    '',
    ' Options:',
    '',
    '   --output, -o     filename to output api dump',
    '   --projects, -p   Asana projects',
    '   --help, -h, -?   show this help message',
    '   --silent, -s     disale more infos',
    '',
    ' Examples:',
    '',
    '   $ migrate debug.json',
    '   $ migrate debug.json \"Blog,Bizdev - Azuki\"',
    '   $ migrate --output debug.json --projects \"Blog,Bizdev - Azuki\"',
    ''
  ].join('\n');

  console.log(usage_message);
  process.exit(1);
}

var remain_options = parsed.argv.remain;
var projects;

var asana_key = process.env.ASANA_API_KEY;
var workspace = process.env.ASANA_WORKSPACE;
var projects  = (process.env.ASANA_PROJECTS && eval(process.env.ASANA_PROJECTS));

var options = {
  to: 'data.json',
  verbose: !parsed.silent
};

if (parsed.output) {
  options.to = parsed.output;
  if (remain_options.length >= 1) {
    projects = remain_options[0].split(',');
  }
} else if (remain_options.length >= 1) {
  options.to = remain_options[0];
  if (remain_options.length > 1) {
    projects = remain_options[1].split(',');
  }
}

var Asana = require('../lib/src/asana').Asana;
(new Asana(asana_key, options)).run(workspace, projects);

